一.创建版本库
	1.创建版本库
		1）在合适的地方创建一个空目录
			命令：mkdir name
			pwd 命令用于显示当前目录
		2）通过 git init 命令把这个目录变成Git可以管理的仓库
	2.提交文件
		1）编写一个文件，一定要放到 name 目录（子目录），因为这是Git仓库，放到其他地方Git找不到
			用命令 git add  把文件添加到仓库
				如：git add readme.txt
		2）用命令git commit 把文件提交到仓库
				如：git commit -m "wrote a readme file"
				
				解释：简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录

		总结：
			添加文件到Git仓库，分两步：

			第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

			第二步，使用命令git commit，完成。
	3.修改文件并提交
		1）使用git status命令看看结果
			git status 命令可以让我们时刻掌握仓库当前的状态
		2）用命令 git diff 文件名 查看修改了什么内容
			git diff readme.txt 
		3）提交修改和提交新文件时一样的 
			a）git add 文件名
			b）在执行第二步git commit之前，我们再运行git status看看当前仓库的状态
				git status告诉我们，将要被提交的修改包括readme.txt，下一步，就可以放心地提交了
			c）git commit -m "提交注释"
			d）提交后，我们再用git status命令看看仓库的当前状态
二.时光机穿梭
	
	1.版本回退
		1）用 git log 命令显示从最近到最远的提交日志，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
			$ git log --pretty=oneline
			---------------------------------------------------------------------
			628e40d94e7989f67cb1438ca184b7ab0d7911d5 git使用说明				 
			4d5be73d0778f54967d03d6d9d947a9af242f016 git使用说明
			6e5bbfa8479399e721c602efb05dc42513f603f9 修改了文件
			833e6fb8ac19e174f487734b6ea7c3fb4f51a2bf 添加一条数据
			167c57cbc0f4c6e5a2de5b57f76a52ca41968c90 wrote a readme file
			----------------------------------------------------------------------
			需要友情提示的是，你看到的一大串类似3628164...882e1e0的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，
			而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id
			需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，
			那肯定就冲突了。

			每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线

		2）Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，
			上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
			
			
			git reset --hard HEAD^  退回到上一个版本
			cat readme.txt    查看文件的内容
			
			用git log再看看现在版本库的状态，最新的那个版本  已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？
			办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是3628164...，于是就可以指定回到未来的某个版本：
			
			git reset --hard 3628164
			
			现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？

			在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。
			Git提供了一个命令git reflog用来记录你的每一次命令：
			
			$ git reflog
			
			
		小结：
			HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

			穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

			要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
			
	2.工作区和暂存区
		前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：

		第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

		第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

		因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

		你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
		
		
-----------------------------------------------2016/01/21--------------------------------------------

	3.管理修改